---
description:
globs:
alwaysApply: false
---
# Phased Development and User Testing Rules

## Overview
This rule establishes the mandatory phased development approach for Helios Trading Bot. Given the financial nature of this software, each feature must be thoroughly tested before integration.

## Core Principle
**Every feature must be deployed → tested → validated → merged in small, manageable phases.**

## Phased Development Process

### Phase Structure
```mermaid
graph TD
    A[Feature Development] --> B[Developer Testing]
    B --> C[Deploy to Test Branch]
    C --> D[User Testing]
    D --> E{Tests Pass?}
    E -->|Yes| F[Create PR]
    E -->|No| G[Fix Issues]
    G --> B
    F --> H[Code Review]
    H --> I[Merge to Main]
    I --> J[Update Documentation]

    style A fill:#e1f5fe
    style D fill:#fff3e0
    style F fill:#e8f5e8
```

### Phase Size Guidelines
- **Maximum 3 days of development** per phase
- **Single feature focus** - no mixing of features
- **Testable independently** - each phase must be demonstrable
- **Risk-appropriate** - financial features get extra scrutiny

## Role Definitions

### Developer Responsibilities (AI Assistant)
- [ ] **Feature Implementation**: Write code following all established rules
- [ ] **Unit Testing**: Create comprehensive tests for all code
- [ ] **Documentation**: Update all relevant documentation
- [ ] **Integration Testing**: Ensure feature works with existing components
- [ ] **Deploy to Test Branch**: Create testable deployment
- [ ] **Bug Fixes**: Address issues found during user testing

### User Responsibilities (Project Owner)
- [ ] **Feature Testing**: Test deployed features thoroughly
- [ ] **Validation**: Confirm feature meets requirements
- [ ] **Feedback**: Provide clear feedback on issues or improvements
- [ ] **Approval**: Give explicit approval before merge to main
- [ ] **Environment Setup**: Provide API keys and test environment access

## Testing Requirements

### For Each Phase
```python
# Testing checklist for each phase
class PhaseTestingChecklist:
    """Mandatory testing requirements for each development phase"""

    def developer_testing(self):
        """Developer must complete before user testing"""
        return [
            "Unit tests written and passing",
            "Integration tests passing",
            "Code follows all style rules",
            "Documentation updated",
            "Security validation complete",
            "Error handling tested"
        ]

    def user_testing(self):
        """User must validate before merge approval"""
        return [
            "Feature works as specified",
            "No obvious bugs or errors",
            "Performance is acceptable",
            "User interface is intuitive",
            "Error messages are clear",
            "Feature integrates well with existing functionality"
        ]
```

### Testing Environments
- **Developer Environment**: Local development with unit/integration tests
- **Test Branch Environment**: Deployed feature for user testing
- **Staging Environment**: Pre-production testing (Phase 5+)
- **Production Environment**: Live trading (Phase 6+ only)

## Feature Approval Process

### Deployment Workflow
```bash
# Developer workflow for each phase
git checkout main
git pull origin main
git checkout -b feat/phase-X-feature-name

# Implement feature with full testing
# Update documentation
# Test thoroughly

git add -A
git commit -m "feat: implement phase X feature"
git push origin feat/phase-X-feature-name

# Deploy to test environment for user validation
# Wait for user testing and approval
# Create PR only after user approval
```

### User Approval Requirements
Before any merge to main:
- [ ] **Explicit User Approval**: "Approved for merge" or similar clear statement
- [ ] **Testing Confirmation**: User confirms feature works as expected
- [ ] **Issue Resolution**: All identified issues must be resolved
- [ ] **Documentation Review**: User confirms documentation is adequate

## Risk-Based Phase Sizing

### Low Risk Features (1-2 days)
- Documentation updates
- Configuration improvements
- Non-financial utility functions
- Basic data processing

### Medium Risk Features (2-3 days)
- API integration components
- Data validation systems
- Testing framework components
- User interface elements

### High Risk Features (Maximum 3 days, extra testing)
- Trading logic implementation
- Risk management systems
- Financial calculations
- Order execution systems

## Quality Gates

### Before User Testing
- [ ] All unit tests pass
- [ ] Integration tests pass
- [ ] Code review by developer complete
- [ ] Documentation updated
- [ ] Security checklist complete

### Before Merge to Main
- [ ] User testing complete and approved
- [ ] All identified issues resolved
- [ ] CHANGELOG.md updated
- [ ] PROJECT_STATUS.md updated
- [ ] PR documentation complete

## Communication Protocol

### During Development
- **Daily Updates**: Brief status updates on progress
- **Blocker Communication**: Immediate notification of any blockers
- **Question Escalation**: Quick clarification on requirements

### During Testing
- **Clear Test Instructions**: What to test and how to test it
- **Issue Reporting**: Detailed description of any problems found
- **Approval Process**: Explicit approval or rejection with reasons

## Emergency Procedures

### If Critical Issues Found
1. **Immediate Stop**: Halt all development on current phase
2. **Issue Analysis**: Understand root cause and impact
3. **Fix Implementation**: Address issue with highest priority
4. **Re-testing**: Complete testing cycle again
5. **Documentation**: Update all relevant documentation

### If User Unavailable for Testing
- **Maximum 2 day wait** for user testing feedback
- **Clear communication** about availability
- **Alternate testing approach** if extended unavailability

## Success Metrics

### Development Quality
- **Zero critical bugs** in merged features
- **Complete test coverage** for all financial code
- **Documentation quality** maintained throughout

### Process Efficiency
- **Phase completion time** within estimates
- **User testing turnaround** within 24-48 hours
- **Issue resolution time** minimized

### Financial Safety
- **Risk validation** for all trading-related features
- **Security compliance** for all implementations
- **Audit trail** maintained for all financial operations

## Enforcement

This rule is **mandatory** for all feature development. Any violation must be documented and corrected:
- **No direct merges** without user testing
- **No skipping of testing phases** for any reason
- **No shortcuts** on financial or security features

**The goal is not to slow development, but to ensure financial safety and quality.**
