---
description: 
globs: 
alwaysApply: true
---
+description: "Comprehensive rules for Python Trading Bot project"
+globs: ["**/*"]
+alwaysApply: true

# Comprehensive Project Rules - ALL RULES ARE ABSOLUTE

**üö® CRITICAL: ALL RULES MUST BE FOLLOWED WITHOUT EXCEPTION üö®**

Apply these comprehensive rules for this Python Trading Bot project. Every rule is mandatory and must be followed absolutely.

## Overview
This is Helios - a sophisticated cryptocurrency trading bot implementing Signal-Driven Dynamic Grid Trading strategy. These rules ensure financial software quality, security, and risk management standards.

## Rule Categories

### 1. Python Code Style
- [001-code-style-python.mdc](mdc:.cursor/rules/001-code-style-python.mdc)
  - Python formatting with black
  - Import organization
  - Naming conventions
  - Type hints and documentation

### 2. Comprehensive Documentation
- [002-documentation.mdc](mdc:.cursor/rules/002-documentation.mdc)
  - API documentation standards
  - Architecture documentation
  - Change documentation requirements
  - Documentation automation and testing

### 3. Trading Bot Security & Financial Safety
- [003-security.mdc](mdc:.cursor/rules/003-security.mdc)
  - Security-first development approach
  - API key and credential protection
  - Financial data validation and sanitization
  - Trading security and audit trails

### 4. Comprehensive PR Process
- [004-pr-process-comprehensive.mdc](mdc:.cursor/rules/004-pr-process-comprehensive.mdc)
  - Architecture diagrams required
  - Impact analysis documentation
  - Usage examples and testing strategy
  - **MANDATORY: Delete PR_BODY.md after PR creation**
  - Trading bot considerations

### 5. Change Impact Tracking
- [005-change-impact-tracking.mdc](mdc:.cursor/rules/005-change-impact-tracking.mdc)
  - System impact visualization
  - Dependency mapping
  - Performance impact analysis
  - Risk impact assessment

### 6. API Evolution Tracking
- [006-api-evolution-tracking.mdc](mdc:.cursor/rules/006-api-evolution-tracking.mdc)
  - Version management strategy
  - Architecture evolution visualization
  - Trading strategy compatibility
  - Exchange API evolution tracking

### 7. Testing and Quality Visualization
- [007-testing-and-quality-visualization.mdc](mdc:.cursor/rules/007-testing-and-quality-visualization.mdc)
  - Comprehensive testing strategy
  - Backtesting framework quality
  - Risk testing and validation
  - Performance validation

### 8. Change Tracking and Project Status (MANDATORY)
- [008-change-tracking-mandatory.mdc](mdc:.cursor/rules/008-change-tracking-mandatory.mdc)
  - **ABSOLUTE RULE**: Change tracking is mandatory
  - CHANGELOG.md and PROJECT_STATUS.md maintenance
  - Pre and post-change protocols
  - Session-level tracking requirements

### 9. Git Branch Protection
- [009-git-branch-protection.mdc](mdc:.cursor/rules/009-git-branch-protection.mdc)
  - Never push directly to main
  - Feature branch workflow
  - Branch naming conventions

### 10. Trading Bot Specific Rules
- [010-trading-bot-specific.mdc](mdc:.cursor/rules/010-trading-bot-specific.mdc)
  - Financial data handling standards
  - Risk management code requirements
  - Backtesting validation rules
  - Live vs paper trading protocols

### 11. Phased Development and User Testing (NEW)
- [011-phased-development-testing.mdc](mdc:.cursor/rules/011-phased-development-testing.mdc)
  - Mandatory phased development approach
  - User testing requirements for each feature
  - Risk-based phase sizing guidelines
  - Feature approval and merge processes

## ABSOLUTE Quality Checklist - MANDATORY FOR EVERY CHANGE
**üö® ALL items must be completed - NO EXCEPTIONS üö®**

### üìä Change Tracking (MANDATORY FIRST)
- [ ] **local/docs/CHANGELOG.md updated immediately**
- [ ] **PROJECT_STATUS.md reflects current state**
- [ ] **Change properly categorized and documented**
- [ ] **Impact assessment completed**
- [ ] **Dependencies and conflicts checked**

### üèóÔ∏è Architecture & Design
- [ ] Architecture diagram created
- [ ] System impact analyzed
- [ ] Integration points documented
- [ ] Performance impact assessed
- [ ] **Risk impact evaluated**

### üß™ Testing & Quality
- [ ] Unit tests written/updated
- [ ] Integration tests pass
- [ ] **Backtesting validation completed**
- [ ] **Risk scenario testing done**
- [ ] Error handling verified

### üìã Documentation
- [ ] API documentation updated
- [ ] Usage examples provided
- [ ] **Risk warnings documented**
- [ ] Migration guides (if needed)
- [ ] All documentation cross-referenced

### üîí Security & Deployment
- [ ] **No credentials committed**
- [ ] **API keys properly secured**
- [ ] **Financial data validation implemented**
- [ ] Security considerations reviewed
- [ ] Rollback plan documented
- [ ] Monitoring considerations

## Growing Platform Vision
This project is evolving from basic trading bot to comprehensive trading platform:
- **Current**: Signal-Driven Dynamic Grid Trading with Binance integration
- **Near-term**: Multi-exchange support, advanced signals, portfolio management
- **Long-term**: ML-powered signals, multi-strategy portfolio, risk analytics platform

Every change should consider this growth trajectory and maintain high quality standards.

## ABSOLUTE RULE ENFORCEMENT

### üö® CRITICAL: ALL RULES ARE MANDATORY üö®

**BEFORE making ANY change:**
1. **MUST** review local/docs/CHANGELOG.md and PROJECT_STATUS.md
2. **MUST** understand current project context
3. **MUST** ensure change aligns with project direction
4. **MUST** validate financial safety implications

**DURING development:**
1. **MUST** follow all coding standards absolutely
2. **MUST** create required architecture diagrams
3. **MUST** implement comprehensive testing
4. **MUST** maintain security standards
5. **MUST** validate risk management implications

**AFTER making ANY change:**
1. **MUST** update local/docs/CHANGELOG.md immediately
2. **MUST** update PROJECT_STATUS.md
3. **MUST** complete all checklist items
4. **MUST** document impact and dependencies
5. **MUST** validate backtest results if strategy changed

### Failure to Follow Rules
**Failure to follow ANY rule will result in:**
- Loss of project context and direction
- Quality degradation and technical debt
- **FINANCIAL RISK and potential losses**
- Security vulnerabilities
- Deployment and maintenance issues
- **Immediate requirement to fix and document properly**

**These rules exist to maintain excellence and financial safety as the platform scales.**
