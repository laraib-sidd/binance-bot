---
description: 
globs: 
alwaysApply: false
---
# Trading Bot Security & Financial Safety Rules

## Overview
Financial trading applications require the highest security standards. One security breach or mishandling of credentials can result in total capital loss. Every security measure is MANDATORY.

## Core Security Principles

### 1. API Key and Credential Protection
**ABSOLUTE RULE**: Never commit any credentials to version control

#### API Key Management
```python
# ✅ CORRECT: Environment-based configuration
import os
from dataclasses import dataclass

@dataclass
class TradingConfig:
    api_key: str = os.getenv("BINANCE_API_KEY")
    api_secret: str = os.getenv("BINANCE_API_SECRET")
    
    def validate(self):
        if not self.api_key or not self.api_secret:
            raise ValueError("API credentials not found in environment")
```

#### Forbidden Practices
```python
# ❌ NEVER DO THIS
api_key = "your_actual_api_key_here"  # NEVER
config = {"secret": "actual_secret"}   # NEVER
```

#### Required Security Measures
- [ ] All API keys stored in `.env` files only
- [ ] `.env` files added to `.gitignore`
- [ ] Environment validation on startup
- [ ] API key rotation capability implemented
- [ ] API permissions restricted to minimum required

### 2. Financial Data Validation
All financial calculations must be validated and protected against manipulation

#### Price Data Validation
```python
def validate_price_data(price: float, symbol: str) -> bool:
    """Validate price data against sanity checks"""
    
    # Basic sanity checks
    if price <= 0:
        raise ValueError(f"Invalid price {price} for {symbol}")
    
    # Check against reasonable bounds (prevent manipulation)
    if price > MAX_REASONABLE_PRICE[symbol]:
        raise ValueError(f"Price {price} exceeds reasonable bounds for {symbol}")
    
    # Check for decimal precision issues
    if len(str(price).split('.')[-1]) > 8:
        raise ValueError(f"Price precision too high: {price}")
    
    return True
```

#### Order Validation
```python
def validate_order(order_size: float, price: float, balance: float) -> bool:
    """Validate order parameters before execution"""
    
    # Size validation
    if order_size <= 0:
        raise ValueError("Order size must be positive")
    
    # Balance validation
    required_balance = order_size * price
    if required_balance > balance * 0.95:  # Leave 5% buffer
        raise ValueError("Insufficient balance for order")
    
    # Minimum order size
    if order_size < MIN_ORDER_SIZE:
        raise ValueError(f"Order size below minimum: {order_size}")
    
    return True
```

### 3. Risk Management Security
Prevent any possibility of exceeding risk limits

#### Position Size Validation
```python
def validate_position_size(proposed_size: float, account_balance: float, 
                         risk_per_trade: float) -> bool:
    """Ensure position size never exceeds risk limits"""
    
    max_allowed_risk = account_balance * risk_per_trade
    
    if proposed_size > max_allowed_risk:
        raise RiskLimitExceeded(
            f"Position size {proposed_size} exceeds max risk {max_allowed_risk}"
        )
    
    return True
```

#### Drawdown Protection
```python
def check_drawdown_limits(current_balance: float, initial_balance: float,
                         max_drawdown: float) -> bool:
    """Circuit breaker for maximum drawdown"""
    
    drawdown = (initial_balance - current_balance) / initial_balance
    
    if drawdown >= max_drawdown:
        raise DrawdownLimitExceeded(
            f"Drawdown {drawdown:.2%} exceeds limit {max_drawdown:.2%}"
        )
    
    return True
```

### 4. Audit Trail and Logging
Complete audit trail for all financial operations

#### Trade Logging
```python
import logging
from datetime import datetime

# Configure audit logger
audit_logger = logging.getLogger('trading.audit')
audit_logger.setLevel(logging.INFO)

def log_trade_decision(symbol: str, action: str, reason: str, 
                      price: float, size: float):
    """Log all trading decisions with full context"""
    
    audit_logger.info({
        'timestamp': datetime.utcnow().isoformat(),
        'symbol': symbol,
        'action': action,
        'reason': reason,
        'price': price,
        'size': size,
        'session_id': get_current_session_id()
    })
```

#### Error Logging
```python
def log_security_event(event_type: str, details: dict):
    """Log security-related events"""
    
    security_logger.warning({
        'timestamp': datetime.utcnow().isoformat(),
        'event_type': event_type,
        'details': details,
        'severity': 'HIGH' if event_type in CRITICAL_EVENTS else 'MEDIUM'
    })
```

### 5. Network Security
Protect API communications and handle failures securely

#### API Request Security
```python
import ssl
import certifi

def create_secure_session():
    """Create SSL-verified session for API calls"""
    
    session = requests.Session()
    session.verify = certifi.where()  # Verify SSL certificates
    session.timeout = (5, 30)  # Connection, read timeouts
    
    return session
```

#### Rate Limiting Protection
```python
class RateLimitProtection:
    def __init__(self, max_requests_per_second: int = 10):
        self.max_rps = max_requests_per_second
        self.request_times = []
    
    def check_rate_limit(self):
        """Prevent API rate limit violations"""
        now = time.time()
        self.request_times = [t for t in self.request_times if now - t < 1.0]
        
        if len(self.request_times) >= self.max_rps:
            raise RateLimitError("API rate limit would be exceeded")
        
        self.request_times.append(now)
```

### 6. Testing Environment Security
Protect against accidental live trading

#### Environment Validation
```python
def validate_trading_environment():
    """Ensure we're in the correct trading environment"""
    
    environment = os.getenv("TRADING_ENVIRONMENT", "").upper()
    
    if environment == "LIVE":
        # Additional confirmations for live trading
        confirm = input("WARNING: Live trading mode. Type 'LIVE_TRADING_CONFIRMED': ")
        if confirm != "LIVE_TRADING_CONFIRMED":
            raise EnvironmentError("Live trading not confirmed")
    
    elif environment not in ["TESTNET", "PAPER", "BACKTEST"]:
        raise EnvironmentError(f"Invalid trading environment: {environment}")
```

#### API Endpoint Validation
```python
def validate_api_endpoints(config):
    """Ensure we're connecting to correct API endpoints"""
    
    if config.testnet and "testnet" not in config.api_base_url.lower():
        raise SecurityError("Testnet flag set but live API URL detected")
    
    if not config.testnet and "testnet" in config.api_base_url.lower():
        raise SecurityError("Live trading with testnet URL")
```

## Security Checklist

### Pre-Deployment Security Review
- [ ] All credentials stored in environment variables
- [ ] No hardcoded API keys or secrets in code
- [ ] Input validation implemented for all financial data
- [ ] Rate limiting protection implemented
- [ ] SSL certificate verification enabled
- [ ] Audit logging configured and tested
- [ ] Risk limit validation implemented
- [ ] Environment validation working
- [ ] Emergency shutdown procedures tested

### Runtime Security Monitoring
- [ ] Failed authentication attempts logged
- [ ] Unusual trading patterns detected
- [ ] API rate limit monitoring active
- [ ] Balance and position monitoring active
- [ ] Security event alerting configured

### Incident Response
- [ ] Emergency shutdown procedure documented
- [ ] API key rotation procedure ready
- [ ] Security incident logging implemented
- [ ] Recovery procedures tested

## Security Violations = Immediate Stop

**ANY security violation must result in immediate trading halt:**
- Invalid credentials detected
- Risk limits exceeded
- Suspicious trading patterns
- API security errors
- Environment mismatches

**These security measures are not optional - they protect your capital.**
