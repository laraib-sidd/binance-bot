---
description: 
globs: 
alwaysApply: false
---
# Comprehensive PR Process

## Overview
Every PR should provide a complete picture of the changes being made. Since this project is growing beyond simple APIs, proper documentation and visualization are essential.

## Branch Naming
Use descriptive branch names with prefixes:
- `feat/add-cluster-management` - New functionality
- `fix/connection-retry-logic` - Bug fixes  
- `docs/api-usage-examples` - Documentation updates
- `refactor/error-handling` - Code improvements
- `arch/add-streaming-pipeline` - Architecture changes

## PR Requirements

### 1. Architecture Diagrams (Required)
Every PR must include a Mermaid diagram showing:
- **System flow changes**
- **API interaction patterns** 
- **Data flow**
- **Component relationships**

#### Example for API Changes:
```mermaid
graph TD
    A[User] --> B[New list_clusters function]
    B --> C[databricks_api_request helper]
    C --> D[Databricks Clusters API]
    D --> E[Format cluster data]
    E --> F[Return formatted table]
    
    style B fill:#e1f5fe
    style D fill:#f3e5f5
```

#### Example for Architecture Changes:
```mermaid
graph TD
    A[FastMCP Server] --> B[API Router]
    B --> C[Databricks SQL Handler]
    B --> D[Databricks REST Handler]
    B --> E[New: Streaming Handler]
    
    C --> F[SQL Warehouse]
    D --> G[REST API]
    E --> H[Kafka/Event Hub]
    
    style E fill:#e8f5e8
    style H fill:#e8f5e8
```

### 2. Change Impact Analysis
Document what this change affects:
- **New capabilities added**
- **Existing functionality modified**
- **Dependencies introduced**
- **Breaking changes** (if any)

### 3. Usage Examples
Show how the new functionality works:
```python
# New cluster management capabilities
clusters = list_clusters()
cluster_id = create_cluster(config)
restart_cluster(cluster_id)
```

### 4. Testing Strategy
- How you tested the changes
- What scenarios were covered
- Any edge cases considered

## Comprehensive PR Template

```markdown
## 🎯 Purpose
Brief description of what this PR accomplishes and why.

## 🔄 Changes
- **Added**: New functions/features
- **Modified**: Existing functionality changes  
- **Removed**: Deprecated features
- **Fixed**: Bug fixes

## 📋 Architecture Impact
```mermaid
graph TD
    A[Component A] --> B[New Component]
    B --> C[Component C]
```

## 🧪 Testing
- [ ] Local testing completed
- [ ] API endpoints tested
- [ ] Error handling verified
- [ ] Integration with existing features confirmed

## 📚 Usage
```python
# Example usage of new functionality
result = new_function(parameters)
```

## 🔍 Related Issues
- Closes #123
- Related to #456

## 🚨 Breaking Changes
- None / List any breaking changes

## 📝 Documentation Updates
- [ ] README updated
- [ ] Function docstrings added
- [ ] API documentation updated
```

## Advanced Visualization Rules

### Data Flow Diagrams
For data processing changes:
```mermaid
flowchart LR
    A[Raw Data] --> B[Validation]
    B --> C[Transformation]
    C --> D[Databricks Table]
    D --> E[Analytics Dashboard]
```

### Sequence Diagrams
For complex interactions:
```mermaid
sequenceDiagram
    participant U as User
    participant API as API Server
    participant DB as Databricks
    
    U->>API: Request cluster list
    API->>DB: Call clusters/list
    DB-->>API: Return cluster data
    API->>API: Format response
    API-->>U: Formatted table
```

### Component Diagrams
For system architecture:
```mermaid
graph TB
    subgraph "API Layer"
        A[FastMCP Server]
        B[Request Router]
    end
    
    subgraph "Service Layer"
        C[SQL Service]
        D[REST Service]
        E[Streaming Service]
    end
    
    subgraph "External"
        F[Databricks SQL]
        G[Databricks REST]
        H[Kafka]
    end
    
    A --> B
    B --> C
    B --> D
    B --> E
    C --> F
    D --> G
    E --> H
```

## Documentation Standards

### Function Documentation
```python
@mcp.tool()
def manage_cluster(cluster_id: int, action: str) -> str:
    """Manage Databricks cluster operations
    
    This function provides comprehensive cluster management capabilities
    including start, stop, restart, and configuration updates.
    
    Args:
        cluster_id (int): The unique identifier of the cluster
        action (str): The action to perform ('start', 'stop', 'restart', 'configure')
        
    Returns:
        str: Formatted status message with operation result
        
    Raises:
        ValueError: If cluster_id is invalid or action is not supported
        ConnectionError: If unable to connect to Databricks API
        
    Examples:
        >>> manage_cluster(123, 'restart')
        'Cluster 123 restarted successfully at 2024-01-15 10:30:00'
        
        >>> manage_cluster(456, 'stop')  
        'Cluster 456 stopped successfully'
    """
```

### API Change Documentation
For each new API capability, document:
- **Purpose**: What problem it solves
- **Parameters**: All input parameters with types
- **Returns**: Return format and structure
- **Error cases**: What can go wrong
- **Examples**: Real usage examples

## PR Creation Workflow

### 1. Create PR_BODY.md
Create comprehensive PR documentation following the template above.

### 2. Create Pull Request
```bash
# Stage and commit all changes
git add .
git commit -m "descriptive commit message"
git push origin branch-name

# Create PR using the body file
gh pr create --title "PR Title" --body-file PR_BODY.md --base main --head branch-name
```

### 3. Cleanup (MANDATORY)
**IMMEDIATELY after PR creation:**
```bash
# Delete the PR_BODY.md file - it's no longer needed
rm PR_BODY.md
```

**Why delete PR_BODY.md:**
- PR body content is now stored in GitHub
- Avoids repository clutter
- Prevents outdated PR bodies from being accidentally reused
- Maintains clean project structure

## Quality Gates

### Pre-PR Checklist
- [ ] Architecture diagram created
- [ ] Documentation updated
- [ ] Examples provided
- [ ] Error handling implemented
- [ ] Local testing completed
- [ ] No credentials in code
- [ ] Dependencies documented

### Post-PR Creation Checklist
- [ ] PR created successfully
- [ ] PR_BODY.md deleted from repository
- [ ] PR link added to local/docs/CHANGELOG.md
- [ ] PR link added to local/docs/PROJECT_STATUS.md

### Review Checklist
- [ ] Architecture makes sense
- [ ] Documentation is clear
- [ ] Examples work
- [ ] Error handling is appropriate
- [ ] Integration points are considered
- [ ] Performance impact assessed

## Growing Project Considerations

As the project evolves beyond API wrappers:
- **Service architecture** diagrams for microservices
- **Database schema** changes visualization
- **Integration patterns** documentation
- **Performance characteristics** analysis
- **Security model** updates
- **Deployment strategy** changes

This ensures every change is well-documented and understood as the system grows in complexity.
