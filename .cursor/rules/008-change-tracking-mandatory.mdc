---
description: 
globs: 
alwaysApply: true
---
# Change Tracking and Project Status Rules

## ABSOLUTE RULE: Change Tracking is Mandatory

**This rule MUST be followed for every single change made to the bricks-and-context project.**

Before making ANY change:
1. Review the current project status in local/docs/CHANGELOG.md
2. Understand what changes have been made recently
3. Ensure your changes align with the current project direction

After making ANY change:
1. Update the local/docs/CHANGELOG.md immediately
2. Update project status documentation
3. Reference this change in future decisions

## Project Status Tracking

### 1. Current Project Status
**Location**: `local/docs/CHANGELOG.md` and `PROJECT_STATUS.md`

The project status must always reflect:
- Current version/milestone
- Active features being developed
- Known issues and limitations
- Recent changes and their impact
- Next planned changes

### 2. Change Documentation Format
Every change must be documented with:
```markdown
## [Unreleased] - Current Development

### Added
- Feature/component description with date and context
- Why this change was made
- How it integrates with existing code

### Changed
- What was modified and why
- Impact on existing functionality
- Migration notes if applicable

### Fixed
- Bug fixes with root cause analysis
- Performance improvements
- Security enhancements

### Removed
- Deprecated features
- Cleanup actions
- Rationale for removal
```

### 3. Mandatory Change Tracking
For EVERY change, update:
- `local/docs/CHANGELOG.md` - Detailed change history
- `PROJECT_STATUS.md` - Current project state
- `README.md` - If user-facing changes
- Relevant documentation files

## Change Categories

### 1. Code Changes
- New MCP tools or capabilities
- Database connection modifications
- Natural language processing updates
- Security enhancements
- Performance optimizations
- Bug fixes

### 2. Configuration Changes
- Environment variable updates
- Databricks connection settings
- MCP server configuration
- Deployment configuration

### 3. Documentation Changes
- API documentation updates
- Usage instructions
- Architecture documentation
- Setup guides

### 4. Infrastructure Changes
- CI/CD pipeline modifications
- Testing framework updates
- Development environment changes
- Deployment process changes

## Status Review Protocol

### 1. Before Starting Work
```bash
# MANDATORY: Review current status
cat local/docs/CHANGELOG.md | head -50
cat PROJECT_STATUS.md
```

Questions to answer:
- What was the last significant change?
- Are there any open issues affecting my work?
- Does my planned change conflict with recent work?
- What dependencies might be affected?

### 2. During Development
- Check for conflicts with recent changes
- Ensure consistency with established patterns
- Document decisions as you make them
- Note any surprises or complications

### 3. After Completing Changes
```markdown
# Update local/docs/CHANGELOG.md
## [Unreleased] - YYYY-MM-DD

### Added/Changed/Fixed
- Specific description of what was done
- Context: why this change was necessary
- Impact: what this enables or improves
- Testing: how the change was verified

# Update PROJECT_STATUS.md
- Current version: X.Y.Z
- Active development: [current focus]
- Last updated: [date]
- Next steps: [planned work]
```

## Project Status Maintenance

### 1. Current Status Template
```markdown
# Project Status - [Date]

## Current Version
- Version: 0.1.0 (or current milestone)
- Last Release: [date]
- Development Status: [Active/Stable/Alpha/Beta]

## Current Focus
- Primary feature being developed
- Current sprint/milestone goals
- Expected completion timeline

## Recent Changes
- Last 3-5 significant changes
- Impact of recent changes
- Any breaking changes

## Known Issues
- Current bugs or limitations
- Workarounds in place
- Planned fixes

## Architecture Status
- MCP Server: [status]
- Databricks Integration: [status]
- Natural Language Processing: [status]
- Security Implementation: [status]
- Testing Coverage: [percentage]

## Dependencies
- Python version and key packages
- Databricks requirements
- MCP framework version
- Any external dependencies

## Next Steps
- Immediate priorities
- Medium-term goals
- Long-term roadmap items
```

### 2. Change Impact Assessment
For each change, document:
- **Backward Compatibility**: Does this break existing functionality?
- **Performance Impact**: Does this affect response times or resource usage?
- **Security Impact**: Does this change security posture?
- **User Impact**: How does this affect the user experience?
- **Development Impact**: How does this affect future development?

## Integration with Cursor Rules

### 1. Rule Updates
When adding or modifying cursor rules:
- Update the main rules index in `000-main-rules.mdc`
- Document the reason for the rule change
- Ensure the new rule doesn't conflict with existing rules
- Update the implementation checklist

### 2. Cross-Reference Changes
- Link related changes across different components
- Note dependencies between changes
- Track cumulative impact of multiple changes
- Maintain consistency across rule implementations

## Enforcement

### 1. Pre-Commit Checks
Before any commit:
- [ ] local/docs/CHANGELOG.md updated
- [ ] PROJECT_STATUS.md reflects current state
- [ ] Related documentation updated
- [ ] Change properly categorized
- [ ] Impact assessed and documented

### 2. Session-Level Tracking
At the start of each work session:
- Review recent changes from local/docs/CHANGELOG.md
- Check PROJECT_STATUS.md for current focus
- Understand context of planned work

At the end of each work session:
- Update documentation with completed work
- Note any incomplete items
- Set context for next session

### 3. Milestone Reviews
At major milestones:
- Comprehensive review of all changes
- Update version numbers
- Clean up and organize change log
- Assess overall project health
- Plan next milestone based on current status

## Failure to Track Changes

**CRITICAL**: Failure to follow this rule will result in:
- Loss of project context
- Difficulty debugging issues
- Inconsistent development direction
- Reduced code quality
- Problems with deployment and maintenance

This rule is ABSOLUTE and must be followed without exception.
