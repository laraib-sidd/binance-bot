[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "helios-trading-bot"
version = "0.1.0"
description = "Helios - A sophisticated cryptocurrency trading bot implementing Signal-Driven Dynamic Grid Trading strategy"
authors = [
    {name = "Helios Trading Bot Team", email = "dev@helios-trading.com"},
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9"
keywords = ["trading", "cryptocurrency", "binance", "grid-trading", "algorithmic-trading", "bot"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

# Core Dependencies
dependencies = [
    # Cryptocurrency Trading APIs
    "python-binance>=1.0.17",
    "ccxt>=4.1.0",
    
    # Data Analysis and Processing
    "pandas>=1.5.3",
    "numpy>=1.24.0",
    "ta>=0.10.2",
    
    # API and Web
    "requests>=2.28.0",
    "aiohttp>=3.8.0",
    "websockets>=11.0.0",
    
    # Configuration and Environment
    "python-dotenv>=1.0.0",
    
    # Logging and Monitoring
    "loguru>=0.7.0",
    
    # Mathematical Operations
    "scipy>=1.10.0",
    
    # Date and Time
    "python-dateutil>=2.8.0",
    
    # Async Support
    "asyncio-throttle>=1.0.2",
]

[project.optional-dependencies]
# Development Dependencies
dev = [
    "pytest>=7.2.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

# Documentation Dependencies  
docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=0.18.0",
]

# Visualization Dependencies
viz = [
    "matplotlib>=3.6.0",
    "plotly>=5.13.0",
    "seaborn>=0.12.0",
]

# Notifications Dependencies
notifications = [
    "python-telegram-bot>=20.0.0",
    "discord.py>=2.3.0",
]

# Backtesting Dependencies
backtest = [
    "zipline-reloaded>=2.2.0",
    "pyfolio-reloaded>=0.9.2",
    "empyrical>=0.5.5",
]

# All optional dependencies
all = [
    "helios-trading-bot[dev,docs,viz,notifications,backtest]"
]

[project.urls]
Homepage = "https://github.com/laraib-sidd/binance-bot"
Documentation = "https://github.com/laraib-sidd/binance-bot/docs"
Repository = "https://github.com/laraib-sidd/binance-bot"
"Bug Tracker" = "https://github.com/laraib-sidd/binance-bot/issues"

[project.scripts]
helios = "src.main:main"
helios-backtest = "src.backtest.main:main"
helios-setup = "setup_dev_environment:main"
helios-test = "test_environment:main"

# Tool Configuration
[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | local
)/
'''

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "ARG002", # Unused method argument
]
exclude = [
    ".bzr",
    ".direnv", 
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "local",
]

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.isort]
known-first-party = ["src", "tests"]
force-sort-within-sections = true
split-on-trailing-comma = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "binance.*",
    "ccxt.*", 
    "ta.*",
    "loguru.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "backtest: marks tests as backtesting tests",
    "api: marks tests that require API access",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

# UV Configuration
[tool.uv]
dev-dependencies = [
    "pytest>=7.2.0",
    "pytest-asyncio>=0.21.0", 
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
] 